<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="full plan" enabled="true">
      <stringProp name="TestPlan.comments">the full aspects of the plan</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="SelectedProperty" elementType="Header">
            <stringProp name="Header.name">SelectedProperty</stringProp>
            <stringProp name="Header.value"></stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${TOKEN}</stringProp>
          </elementProp>
          <elementProp name="UserCurrentDateTime&#x9;2024-02-04 11" elementType="Header">
            <stringProp name="Header.name">UserCurrentDateTime</stringProp>
            <stringProp name="Header.value">${__timeShift(yyyy-MM-dd HH:mm:ss,,PT-2H,,)}</stringProp>
          </elementProp>
          <elementProp name="SelectedProperty" elementType="Header">
            <stringProp name="Header.name">SelectedProperty</stringProp>
            <stringProp name="Header.value">${Property_ID}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Setup Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="environmentType" elementType="Argument">
            <stringProp name="Argument.name">environmentType</stringProp>
            <stringProp name="Argument.value">stage</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Live_URL" elementType="Argument">
            <stringProp name="Argument.name">Live_URL</stringProp>
            <stringProp name="Argument.value">app.nazeel.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Stage_URL" elementType="Argument">
            <stringProp name="Argument.name">Stage_URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">193.122.79.103</stringProp>
          </elementProp>
          <elementProp name="Demo_URL" elementType="Argument">
            <stringProp name="Argument.name">Demo_URL</stringProp>
            <stringProp name="Argument.value">staging.nazeel.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Created_Reservation" elementType="Argument">
            <stringProp name="Argument.name">Created_Reservation</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Property_ID" elementType="Argument">
            <stringProp name="Argument.name">Property_ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Company_ID" elementType="Argument">
            <stringProp name="Argument.name">Company_ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Property_Code" elementType="Argument">
            <stringProp name="Argument.name">Property_Code</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">&quot;P00166&quot;</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="static variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="From_Date" elementType="Argument">
            <stringProp name="Argument.name">From_Date</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">&quot;${__time(yyyy-MM-dd hh:mm)}&quot;</stringProp>
          </elementProp>
          <elementProp name="To_Date" elementType="Argument">
            <stringProp name="Argument.name">To_Date</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">&quot;${__timeShift(yyyy-MM-dd,,P1d,,)} 00:00&quot;</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="reservation variables and setup" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Unit_Type_ID" elementType="Argument">
            <stringProp name="Argument.name">Unit_Type_ID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectedUnitID" elementType="Argument">
            <stringProp name="Argument.name">selectedUnitID</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectedUnitNumber" elementType="Argument">
            <stringProp name="Argument.name">selectedUnitNumber</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="selectedUnitTypeName" elementType="Argument">
            <stringProp name="Argument.name">selectedUnitTypeName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hasGuests" elementType="Argument">
            <stringProp name="Argument.name">hasGuests</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counter" elementType="Argument">
            <stringProp name="Argument.name">counter</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="unitsCount" elementType="Argument">
            <stringProp name="Argument.name">unitsCount</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">static varible dont change</stringProp>
          </elementProp>
          <elementProp name="res_type" elementType="Argument">
            <stringProp name="Argument.name">res_type</stringProp>
            <stringProp name="Argument.value">single</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">single or group</stringProp>
          </elementProp>
          <elementProp name="res_type_id" elementType="Argument">
            <stringProp name="Argument.name">res_type_id</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">static variable dont change</stringProp>
          </elementProp>
          <elementProp name="number_ofUnits" elementType="Argument">
            <stringProp name="Argument.name">number_ofUnits</stringProp>
            <stringProp name="Argument.desc">enter required units of group reservation</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">${BASE_URL}</stringProp>
            <stringProp name="Authorization.username">elbaih</stringProp>
            <stringProp name="Authorization.password">Aa@123456</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Env_Profiler" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="stage Env setup" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="IfController.condition">${__javaScript(&quot;${environmentType}&quot; == &quot;stage&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="stage" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="BASE_URL" elementType="Argument">
                  <stringProp name="Argument.name">BASE_URL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">${Stage_URL}</stringProp>
                </elementProp>
                <elementProp name="Protocol" elementType="Argument">
                  <stringProp name="Argument.name">Protocol</stringProp>
                  <stringProp name="Argument.value">http</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="port" elementType="Argument">
                  <stringProp name="Argument.name">port</stringProp>
                  <stringProp name="Argument.value">9000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="loggingIn" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="-1554765990">logging in </stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reservations" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="1828117855">Reservations ${Company_ID} ${Property_ID}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Vouchers" enabled="false">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="-1564234843">Vouchers</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="live env setup" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">&quot;${environmentType}&quot; == &quot;live&quot;</stringProp>
          <stringProp name="IfController.condition">${__javaScript(&quot;${environmentType}&quot; == &quot;live&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="live" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="BASE_URL" elementType="Argument">
                  <stringProp name="Argument.name">BASE_URL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">${Live_URL}</stringProp>
                </elementProp>
                <elementProp name="Protocol" elementType="Argument">
                  <stringProp name="Argument.name">Protocol</stringProp>
                  <stringProp name="Argument.value">https</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="port" elementType="Argument">
                  <stringProp name="Argument.name">port</stringProp>
                  <stringProp name="Argument.value">4443</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="-1554765990">logging in </stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="1828117855">Reservations ${Company_ID} ${Property_ID}</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="demo env setup" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">&quot;${environmentType}&quot; == &quot;live&quot;</stringProp>
          <stringProp name="IfController.condition">${__javaScript(&quot;${environmentType}&quot; == &quot;demo&quot;)}</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="demo" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="BASE_URL" elementType="Argument">
                  <stringProp name="Argument.name">BASE_URL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <stringProp name="Argument.value">${Live_URL}</stringProp>
                </elementProp>
                <elementProp name="Protocol" elementType="Argument">
                  <stringProp name="Argument.name">Protocol</stringProp>
                  <stringProp name="Argument.value">https</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="port" elementType="Argument">
                  <stringProp name="Argument.name">port</stringProp>
                  <stringProp name="Argument.value">4431</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-1735288294">full plan</stringProp>
                <stringProp name="-233982402">logging in and choosing property</stringProp>
                <stringProp name="-1554765990">logging in </stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="logging in and choosing property" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="logging in " enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="end user login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="accesCode" elementType="Argument">
                  <stringProp name="Argument.name">accesCode</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="access code setter odd" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__javaScript((&quot;${__threadNum}&quot;)%2 !=0 )}</stringProp>
            </IfController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">372</stringProp>
                <stringProp name="CounterConfig.end">999999</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">accesCode</stringProp>
                <stringProp name="CounterConfig.format">&quot;00000&quot;</stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;accesCode&quot;,vars.get(&quot;accSetter&quot;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="access code setter" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__javaScript((&quot;${__threadNum}&quot;)%2 ==0 )}</stringProp>
            </IfController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">372</stringProp>
                <stringProp name="CounterConfig.end">999999</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">accesCode</stringProp>
                <stringProp name="CounterConfig.format">&quot;00000&quot;</stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">vars.put(&quot;accesCode&quot;,vars.get(&quot;accSetter&quot;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.nazeel.net:4443/api/Account/LogIn" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;userName&quot;:&quot;mostafa&quot;,&quot;password&quot;:&quot;Aa@123456&quot;,&quot;accessCode&quot;:${accesCode}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Account/LogIn</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="token extraction" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">TOKEN; Company_ID; Property_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.token; $.data.companyId; $.data.propertiesIds[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="TestPlan.comments">extracting token and addding it to the variable assigned</stringProp>
                <stringProp name="Scope.variable">${token}</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default; No_Default; No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.nazeel.net:4443/api/Setting/Property/SearchMasterMenu" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;paging&quot;: {&#xd;
		&quot;skip&quot;: 0,&#xd;
		&quot;pageSize&quot;: 20&#xd;
	},&#xd;
	&quot;countryId&quot;: null,&#xd;
	&quot;propertyNameOrCode&quot;: ${Property_Code},&#xd;
	&quot;companyId&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/Property/SearchMasterMenu</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Property_ID; Company_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.result[0].propertyId; $.data.result[0].companyId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Scope.variable">Property_ID</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default; No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.nazeel.net:4443/api/Setting/Property/ValidatePropertyStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${Property_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/Property/ValidatePropertyStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://app.nazeel.net:4443/api/Setting/Property/GetMasterMenuSelectedProperty/Property_ID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/Property/GetMasterMenuSelectedProperty/${Property_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Reservations ${Company_ID} ${Property_ID}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Reservation" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="group reservation Setup" enabled="true">
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
              <stringProp name="IfController.condition">${__javaScript(&quot;${res_type}&quot; == &quot;group&quot;)}</stringProp>
            </IfController>
            <hashTree>
              <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="group Reservation Variables" enabled="true">
                <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="res_type_id" elementType="Argument">
                      <stringProp name="Argument.name">res_type_id</stringProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="unitsCount" elementType="Argument">
                      <stringProp name="Argument.name">unitsCount</stringProp>
                      <stringProp name="Argument.value">${number_ofUnits}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </kg.apc.jmeter.control.ParameterizedController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Setting/UnitsManagement/UnitType/GetLiteCustomizedUnitTypes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> ${Property_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/UnitsManagement/UnitType/GetLiteCustomizedUnitTypes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="SelectedProperty" elementType="Header">
                    <stringProp name="Header.name">SelectedProperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="ClientId" elementType="Header">
                    <stringProp name="Header.name">ClientId</stringProp>
                    <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Unittype_ID,unitTypeName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Unit_Type_ID ; unitTypeName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].value ; $.data[0].label </stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Defult ; No_Defult</stringProp>
                <stringProp name="TestPlan.comments">Unittype_ID</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="select unit by type" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/submit-selected-units" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;selectedUnitsIds&quot;: [],&#xd;
	&quot;selectedUnitTypes&quot;: [&#xd;
		{&#xd;
			&quot;count&quot;: ${unitsCount},&#xd;
			&quot;unitTypeId&quot;: ${Unit_Type_ID}&#xd;
		}&#xd;
	],&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;startDate&quot;: ${From_Date},&#xd;
	&quot;endDate&quot;: ${To_Date}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Reservation/submit-selected-units</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="unit _ID,_Number,_TypeName,_floorId,_floorName" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedUnitID; selectedUnitNumber; selectedUnitTypeName; selectedFloorId; selectedFloorName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.selectedUnits[0].unitId; $.data.selectedUnits[0].unitNumber; $.data.selectedUnits[0].unitTypeName; $.data.selectedUnits[0].floorId ;$.data.selectedUnits[0].floorName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">No_default ;No_default ;No_default ;No_default ; No_defult;</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">mergeState;</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.selectedUnits[0].canBeMerged;</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnits,Units" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">//// geting reservation units for the create wizard
def response = new groovy.json.JsonSlurper().parse(prev.getResponseData())
response.data.selectedUnits.each{unit -&gt;
	unit.remove(&quot;reservationId&quot;)
	unit.remove(&quot;fromDate&quot;)
	unit.remove(&quot;toDate&quot;)
	unit.remove(&quot;requireReload&quot;)
	unit.put(&quot;bothUnitsUnAvailableInCaseOfMerge&quot;,false)
	unit.put(&quot;mergeUnAvailable&quot;,false)
	unit.put(&quot;hideFromGrid&quot;,false)
	unit.put(&quot;hideFromGrid&quot;,false)
	unit.put(&quot;displayedUnitNumber&quot;,unit.unitNumber)
	unit.put(&quot;displayedUnitTypeName&quot;,vars.get(&quot;unitTypeName&quot;))
	}
def reservationUnits = new groovy.json.JsonBuilder(response.data.selectedUnits).toPrettyString()
//log.info(reservationUnits)
vars.put(&apos;reservationUnits&apos;, reservationUnits)

//// getting units for get rates scripts
def response1 = new groovy.json.JsonSlurper().parse(prev.getResponseData())
response1.data.selectedUnits.each{unit -&gt; 
	unit.remove(&quot;canBeMerged&quot;)
	unit.remove(&quot;reservationId&quot;)
	unit.remove(&quot;floorId&quot;)
	unit.remove(&quot;floorName&quot;)
	unit.remove(&quot;fromDate&quot;)
	unit.remove(&quot;toDate&quot;)
	unit.remove(&quot;mergedUnitReservationUnitId&quot;)
	unit.remove(&quot;doorLockCardsKeysCount&quot;)
	unit.remove(&quot;mergedUnitId&quot;)
	unit.remove(&quot;mergedUnitNumber&quot;)
	unit.remove(&quot;unavailable&quot;)
	unit.remove(&quot;changedUnitNumber&quot;)
	unit.remove(&quot;changedUnitTypeName&quot;)
	unit.remove(&quot;action&quot;)
	unit.remove(&quot;allowChangeUnit&quot;)
	unit.remove(&quot;changeUnitReason&quot;)
	unit.remove(&quot;isLockMapped&quot;)
	unit.remove(&quot;requireReload&quot;)
	
}
def units = new groovy.json.JsonBuilder(response1.data.selectedUnits).toPrettyString()
//log.info(units)
vars.put(&quot;units&quot;,units)


</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Availability/get-available-unit-by-type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;take&quot;:10,&#xd;
&quot;nonLockStatusId&quot;:1,&#xd;
&quot;propertyId&quot;:${Property_ID},&#xd;
&quot;startDate&quot;:${From_Date},&#xd;
&quot;endDate&quot;:${To_Date}}&#xd;
&#xd;
//2024-02-05</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Availability/get-available-unit-by-type</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Setting/Financial/Insurance/getUnitsTypesInsurance" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;liteUnitTypesInsurance&quot;: [&#xd;
		{&#xd;
			&quot;insuranceValue&quot;: 0,&#xd;
			&quot;typeId&quot;: ${Unit_Type_ID},&#xd;
			&quot;occurrency&quot;: 1&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Setting/Financial/Insurance/getUnitsTypesInsurance</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="tax and rate calculations" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/rate-calculator/get-reservation-units-rates" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;fromDate&quot;: ${From_Date},&#xd;
	&quot;toDate&quot;: ${To_Date},&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;reservationRentalTypeId&quot;: 1,&#xd;
	&quot;reservationCalenderTypeId&quot;: 1,&#xd;
	&quot;reservationStatusId&quot;: 2,&#xd;
	&quot;selectedRateMethodId&quot;: 2,&#xd;
	&quot;selectedRateMethodChanged&quot;: false,&#xd;
	&quot;units&quot;: ${units},&#xd;
	&quot;rateCalculatorRequestCounter&quot;: 1&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/financial/rate-calculator/get-reservation-units-rates</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnitsRates , rate" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())

json.data.each{unit -&gt;
unit.put(&quot;isCalculatedAtFrontEnd&quot;,false)
unit.put(&quot;rateCalculatorRequestCounter&quot;,1)
unit.rates.each{rate -&gt;
rate.put(&quot;nights&quot;,1)
rate.put(&quot;isLastRate&quot;,true)
}
unit.put(&quot;checkOutDate&quot;,null)
}

def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
//log.info(newJson)
vars.put(&apos;reservationUnitsRates&apos;, newJson)
// the rate field in rreservation creation
def json1 = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalRate = 0.0
json1.data.each{unit -&gt;
Double unitRate = unit.rates[0].rate
totalRate =unitRate+totalRate
}
log.info(&quot;the total rate is :&quot;,totalRate)
vars.put(&quot;rate&quot;,totalRate.toString())
</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/tax-calculator/get-reservation-taxes" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;startDate&quot;:${From_Date},&#xd;
	&quot;endDate&quot;: ${To_Date},&#xd;
	&quot;datesChanged&quot;: false,&#xd;
	&quot;reload&quot;: false,&#xd;
	&quot;propertyId&quot;: ${Property_ID}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/financial/tax-calculator/get-reservation-taxes</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="reservationTaxes" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">reservationTaxes</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="totalTaxes, reservationTaxes" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalTaxes = 0.0
Double rate =Double.parseDouble(vars.get(&quot;rate&quot;))
boolean inclusive = false
Double	rent =0.0
Double inclusiveTaxes=0.0
if(json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}){
		rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/((0.15*0.025)+1+0.15+0.025))
}else if (json.data.any{tax-&gt;(!tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}&amp;&amp;json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.taxName==&quot;Lodging Fees&quot;)}){
rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/(1+0.15+0.025))
}
json.data.each{tax -&gt; 
Double gotTaxes =tax.totalAmount
//method Id --&gt; amount= 2 or percentage = 1
if(tax.isActive){
	//Rent Taxes
if(tax.appliedForName==&quot;Rent&quot;||(tax.appliedForName==&quot;Lodging Fees(Fee)&quot; &amp;&amp; tax.taxAppliedForSource==1)){
	if(tax.methodId==1){
		if(tax.inclusive==false){
				if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					i++
					tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01*0.025))				
				}else if (tax.appliedForName==&quot;Rent&quot;){
				tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01))				
				}
		

		}else if(tax.inclusive){
			
					if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01*0.025))
					}else if(tax.appliedForName==&quot;Rent&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01))
							
					}
			}
	}else{tax.put(&quot;totalAmount&quot;,tax.amount)}
	
	gotTaxes = tax.totalAmount
	//log.info( &quot;tax is&quot;,gotTaxes.toString())
	totalTaxes =gotTaxes+ totalTaxes
	if(tax.inclusive==false){
	rate += gotTaxes	
	}else{inclusiveTaxes = totalTaxes}
	
}
}
}
//log.info(&quot;total taxes is&quot;,totalTaxes.toString())
vars.put(&quot;totalTaxes&quot;,totalTaxes.toString())
vars.put(&quot;inclusiveTaxes&quot;,inclusiveTaxes.toString())
vars.put(&quot;net&quot;,rate.toString())
def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
log.info(newJson)
vars.put(&quot;reservationTaxes&quot;,newJson)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="select guset from nazeel by id" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Customers/GuestProfile/GetTotalCount" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;paging&quot;:{&#xd;
	&quot;skip&quot;:0,&#xd;
	&quot;pageSize&quot;:20&#xd;
	},&#xd;
	&quot;skipId&quot;:0,&#xd;
	&quot;companyId&quot;: null,//${Company_ID},&#xd;
	//&quot;guestClassId&quot;:${selectedClass},&#xd;
	&quot;isNazeelGuest&quot;: true,&#xd;
  	&quot;defaultCompanyId&quot;: ${Company_ID},&#xd;
  	&quot;idNumber&quot;: &quot;100900600&quot;,&#xd;
	&quot;name&quot;:null,&#xd;
	&quot;mobileNumber&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Customers/GuestProfile/GetTotalCount</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="selectedClass" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def guestClasses = vars.get(&quot;guestClasses&quot;)
def json = new groovy.json.JsonSlurper().parseText(guestClasses)
def classesIds =[]
json.each{guestClass -&gt;
classesIds &lt;&lt; guestClass.value
}



int i =  Integer.parseInt(vars.get(&quot;counter&quot;))
//log.info(&quot;Value of i: {}&quot;, i) // Log the value of i
def selectedClass = classesIds[i]
//log.info(&quot;value of selected class :&quot;, selectedClass)
vars.put(&quot;selectedClass&quot;,selectedClass.toString())

</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="set Counter" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
if (json.data &gt; 0){

		vars.put(&quot;hasGuests&quot;,&quot;true&quot;)
	}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Customers/GuestProfile/SearchLiteWithIdsAndComments" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;paging&quot;:&#xd;
	{&quot;skip&quot;:0,&#xd;
	&quot;pageSize&quot;:20&#xd;
	},&#xd;
	&quot;skipId&quot;:0,&#xd;
	&quot;companyId&quot;:null,//${Company_ID},&#xd;
	&quot;defaultCompanyId&quot;: ${Company_ID},&#xd;
     &quot;idNumber&quot;: &quot;100900600&quot;,&#xd;
	//&quot;guestClassId&quot;:${selectedClass},&#xd;
	 &quot;isNazeelGuest&quot;: true,&#xd;
	&quot;name&quot;:null,&#xd;
	&quot;mobileNumber&quot;:null,&#xd;
	&quot;isActive&quot;:true&#xd;
	}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Customers/GuestProfile/SearchLiteWithIdsAndComments</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="append guest data" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def baseGuest = json.data.result[0]

def appendGuest =new groovy.json.JsonBuilder(baseGuest).toPrettyString()
vars.put(&quot;appendGuest&quot;,appendGuest)


</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Customers/GuestProfile/CopyToCompanyIfNotExist?targetCompanyId={company_Id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${appendGuest}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Customers/GuestProfile/CopyToCompanyIfNotExist?targetCompanyId=${Company_ID}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="guestData" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def baseGuest = json.data

def map =[
&quot;nationalityId&quot;:baseGuest.nationalityId,
&quot;guestClassId&quot;:baseGuest.guestClassId,
&quot;guestClassName&quot;:baseGuest.guestClassName,
&quot;ownerGuestIsMinimum&quot;:baseGuest.isMinimumData,
&quot;ownerGuestIdType&quot;:baseGuest.idType,
&quot;ownerGuestIdTypeName&quot;:baseGuest.idName,
&quot;ownerCountryDialCodeId&quot;:baseGuest.countryDialCodeId,
&quot;ownerGuestIdNumber&quot;:baseGuest.idNumber,
&quot;ownerGuestIdsId&quot;:baseGuest.guestProfileIdsId,
&quot;ownerMobileNumber&quot;:baseGuest.mobileNumber,
&quot;ownerEmailAddress&quot;:baseGuest.emailAddress,
&quot;ownerGuestCountryDialCode&quot;:baseGuest.countryDialCode,
&quot;ownerId&quot;:baseGuest.guestProfileId,
&quot;ownerGuestVisaNumber&quot;:baseGuest.visaNumber,
&quot;guestClassTypeId&quot;:baseGuest.guestClassListTypeId,
&quot;guestClassIconId&quot;:baseGuest.iconId,
&quot;ownerGuestIdSerial&quot;:baseGuest.idSerial,
&quot;ownerFullNameAr&quot;:baseGuest.fullNameAr,
&quot;ownerFullNameEn&quot;:baseGuest.fullNameEn,
]
def alteredGuest = new groovy.json.JsonBuilder(map).toPrettyString()
String guestData =alteredGuest.toString()
	guestData=guestData.minus(&quot;{&quot;)
	guestData=guestData.minus(&quot;}&quot;)
    guestData=guestData.trim()
vars.put(&quot;guestData&quot;,guestData)
log.info(vars.get(&quot;guestData&quot;))

</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="guestId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">guestId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.guestProfileId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Customers/GuestProfile/check-if-has-discount/{Guest_Id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
                <stringProp name="HTTPSampler.path">api/Customers/GuestProfile/check-if-has-discount/${guestId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="SelectedProperty" elementType="Header">
                      <stringProp name="Header.name">SelectedProperty</stringProp>
                      <stringProp name="Header.value">${Property_ID}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                    </elementProp>
                    <elementProp name="ClientId" elementType="Header">
                      <stringProp name="Header.name">ClientId</stringProp>
                      <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/create-wizard" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;comments&quot;: null,&#xd;
&quot;type&quot;: ${res_type_id},&#xd;
&quot;status&quot;: 2,&#xd;
&quot;rentalTypeId&quot;: 1,&#xd;
&quot;autoExtend&quot;: true,&#xd;
&quot;calendarTypeId&quot;: 1,&#xd;
${guestData},&#xd;
&quot;groupOwnerType&quot;: 1,  //// group related&#xd;
&quot;reservationGuests&quot;: [],  //// group related&#xd;
&quot;reservationUnits&quot;:${reservationUnits},&#xd;
&quot;corporateId&quot;: null,    /// group related&#xd;
&quot;corporateName&quot;: null,  //// group related&#xd;
&quot;reservationPenalties&quot;: [],&#xd;
&quot;discountAmountTypeId&quot;: 2,&#xd;
&quot;selectedRateMethodId&quot;: 2,&#xd;
&quot;totalNet&quot;: ${net},&#xd;
&quot;totalRentAfterDiscount&quot;: ${rate},&#xd;
&quot;totalExtras&quot;: 0,&#xd;
&quot;totalRefund&quot;: 0,&#xd;
&quot;totalRentBeforeDiscount&quot;: ${rate},&#xd;
&quot;isAdjustBalance&quot;: false,&#xd;
&quot;isComplimentary&quot;: false,&#xd;
&quot;discountAmount&quot;: 0,&#xd;
&quot;totalPenalties&quot;: 0,&#xd;
&quot;totalTaxes&quot;: ${totalTaxes},&#xd;
&quot;balance&quot;: -${net},&#xd;
&quot;totalInclusiveTaxes&quot;: ${inclusiveTaxes},&#xd;
&quot;totalRentTaxes&quot;: ${totalTaxes},&#xd;
&quot;totalReceived&quot;: 0,&#xd;
&quot;totalInsuranceReceived&quot;: 0,&#xd;
&quot;totalInsuranceRefund&quot;: 0,&#xd;
&quot;unitsTotalInsurance&quot;: 0,&#xd;
&quot;totalDraft&quot;: 0,&#xd;
&quot;integrationStatuses&quot;: [],&#xd;
&quot;totalRestDiscount&quot;: 0,&#xd;
&quot;numberOfNights&quot;: 1,&#xd;
&quot;fromDate&quot;: ${From_Date},&#xd;
&quot;toDate&quot;: ${To_Date},&#xd;
&quot;expiryDate&quot;: null,&#xd;
&quot;propertyId&quot;: ${Property_ID},&#xd;
&quot;companyId&quot;: ${Company_ID},&#xd;
&quot;reservationSourceId&quot;: 1,&#xd;
&quot;externalReservationNumber&quot;: null,&#xd;
&quot;reservationPurposeId&quot;: 1,&#xd;
&quot;reservationUnitsRates&quot;:${reservationUnitsRates},&#xd;
&quot;totalRentDiscount&quot;: 0,&#xd;
&quot;totalRentDiscountPercent&quot;: 0,&#xd;
&quot;totalAdjustment&quot;: 0,&#xd;
&quot;reservationTaxes&quot;: ${reservationTaxes}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/create-wizard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Created_Reservation</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="check in reservation" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/Get/{created Reservation}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/Get/${Created_Reservation}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnits ,units [setter]" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def reservation = new groovy.json.JsonBuilder(json.data).toPrettyString()


// set reservation body
vars.put(&quot;reservation&quot;,reservation)
//log.info(vars.get(&quot;reservation&quot;))

// set reservation units to be by number
json.data.reservationUnits.each{unit-&gt;
unit.put(&quot;isByUnitType&quot;,false)}
def reservationUnits =new groovy.json.JsonBuilder(json.data.reservationUnits).toPrettyString()
vars.put(&apos;reservationUnits&apos;,reservationUnits)


json.data.reservationUnits.each{unit -&gt; 
	unit.remove(&quot;canBeMerged&quot;)
	unit.remove(&quot;reservationId&quot;)
	unit.remove(&quot;floorId&quot;)
	unit.remove(&quot;floorName&quot;)
	unit.remove(&quot;fromDate&quot;)
	unit.remove(&quot;toDate&quot;)
	unit.remove(&quot;mergedUnitReservationUnitId&quot;)
	unit.remove(&quot;doorLockCardsKeysCount&quot;)
	unit.remove(&quot;mergedUnitId&quot;)
	unit.remove(&quot;mergedUnitNumber&quot;)
	unit.remove(&quot;unavailable&quot;)
	unit.remove(&quot;changedUnitNumber&quot;)
	unit.remove(&quot;changedUnitTypeName&quot;)
	unit.remove(&quot;action&quot;)
	unit.remove(&quot;allowChangeUnit&quot;)
	unit.remove(&quot;changeUnitReason&quot;)
	unit.remove(&quot;isLockMapped&quot;)
	unit.remove(&quot;requireReload&quot;)
	
}
def units =new groovy.json.JsonBuilder(json.data.reservationUnits).toPrettyString()
//log.info(units)
vars.put(&quot;units&quot;,units)
vars.put(&quot;units&quot;,units)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/rate-calculator/get-reservation-units-rates" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;fromDate&quot;: ${From_Date},&#xd;
	&quot;toDate&quot;: ${To_Date},&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;reservationRentalTypeId&quot;: 1,&#xd;
	&quot;reservationCalenderTypeId&quot;: 1,&#xd;
	&quot;reservationStatusId&quot;: 2,&#xd;
	&quot;selectedRateMethodId&quot;: 2,&#xd;
	&quot;selectedRateMethodChanged&quot;: false,&#xd;
	&quot;units&quot;: ${units},&#xd;
	&quot;rateCalculatorRequestCounter&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/financial/rate-calculator/get-reservation-units-rates</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">consumes units Variable</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="SelectedProperty" elementType="Header">
                    <stringProp name="Header.name">SelectedProperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="ClientId" elementType="Header">
                    <stringProp name="Header.name">ClientId</stringProp>
                    <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnitsRates , rate" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())

json.data.each{unit -&gt;
unit.put(&quot;isCalculatedAtFrontEnd&quot;,false)
unit.put(&quot;rateCalculatorRequestCounter&quot;,1)
unit.rates.each{rate -&gt;
rate.put(&quot;nights&quot;,1)
rate.put(&quot;isLastRate&quot;,true)
}
unit.put(&quot;checkOutDate&quot;,null)
}

def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
//log.info(newJson)
vars.put(&apos;reservationUnitsRates&apos;, newJson)
// the rate field in rreservation creation
def json1 = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalRate = 0.0
json1.data.each{unit -&gt;
Double unitRate = unit.rates[0].rate
totalRate =unitRate+totalRate
}
log.info(&quot;the total rate is :&quot;,totalRate)
vars.put(&quot;rate&quot;,totalRate.toString())
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/tax-calculator/get-reservation-taxes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;startDate&quot;:${From_Date},&#xd;
	&quot;endDate&quot;: ${To_Date},&#xd;
	&quot;datesChanged&quot;: false,&#xd;
	&quot;reservationId&quot;:${Created_Reservation},&#xd;
	&quot;reload&quot;: false,&#xd;
	&quot;propertyId&quot;: ${Property_ID}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/financial/tax-calculator/get-reservation-taxes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="SelectedProperty" elementType="Header">
                    <stringProp name="Header.name">SelectedProperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="ClientId" elementType="Header">
                    <stringProp name="Header.name">ClientId</stringProp>
                    <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="reservationTaxes" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">reservationTaxes</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="totalTaxes, reservationTaxes" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalTaxes = 0.0
Double rate =Double.parseDouble(vars.get(&quot;rate&quot;))
boolean inclusive = false
Double	rent =0.0
Double inclusiveTaxes=0.0
if(json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}){
		rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/((0.15*0.025)+1+0.15+0.025))
}else if (json.data.any{tax-&gt;(!tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}&amp;&amp;json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.taxName==&quot;Lodging Fees&quot;)}){
rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/(1+0.15+0.025))
}
json.data.each{tax -&gt; 
Double gotTaxes =tax.totalAmount
//method Id --&gt; amount= 2 or percentage = 1
if(tax.isActive){
	//Rent Taxes
if(tax.appliedForName==&quot;Rent&quot;||(tax.appliedForName==&quot;Lodging Fees(Fee)&quot; &amp;&amp; tax.taxAppliedForSource==1)){
	if(tax.methodId==1){
		if(tax.inclusive==false){
				if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					i++
					tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01*0.025))				
				}else if (tax.appliedForName==&quot;Rent&quot;){
				tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01))				
				}
		

		}else if(tax.inclusive){
			
					if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01*0.025))
					}else if(tax.appliedForName==&quot;Rent&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01))
							
					}
			}
	}else{tax.put(&quot;totalAmount&quot;,tax.amount)}
	
	gotTaxes = tax.totalAmount
	//log.info( &quot;tax is&quot;,gotTaxes.toString())
	totalTaxes =gotTaxes+ totalTaxes
	if(tax.inclusive==false){
	rate += gotTaxes	
	}else{inclusiveTaxes = totalTaxes}
	
}
}
}
//log.info(&quot;total taxes is&quot;,totalTaxes.toString())
vars.put(&quot;totalTaxes&quot;,totalTaxes.toString())
vars.put(&quot;inclusiveTaxes&quot;,inclusiveTaxes.toString())
vars.put(&quot;net&quot;,rate.toString())
def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
log.info(newJson)
vars.put(&quot;reservationTaxes&quot;,newJson)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Reservation/check-in-wizard" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${changedReservation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/check-in-wizard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="changedReservation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def updatedReservation = new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservation&quot;))

double balance = -1* Double.parseDouble(vars.get(&quot;net&quot;))
/// Action  1  -&gt; checkin (edit)
updatedReservation.put(&quot;action&quot;,1)
updatedReservation.put(&quot;reservationUnits&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationUnits&quot;)))
updatedReservation.put(&quot;reservationUnitsRates&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationUnitsRates&quot;)))
updatedReservation.put(&quot;reservationTaxes&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationTaxes&quot;)))
updatedReservation.put(&quot;unitsTotalInsurance&quot;,0)
updatedReservation.put(&quot;totalReceived&quot;,0)
updatedReservation.put(&quot;totalRefund&quot;,0)
updatedReservation.put(&quot;totalInsuranceReceived&quot;,0)
updatedReservation.put(&quot;totalInsuranceRefund&quot;,0)
updatedReservation.put(&quot;totalDraft&quot;,0)
updatedReservation.put(&quot;balance&quot;,balance)
updatedReservation.put(&quot;totalExtras&quot;,0)
updatedReservation.put(&quot;totalNet&quot;,vars.get(&quot;net&quot;))
updatedReservation.put(&quot;totalRentBeforeDiscount&quot;,vars.get(&quot;rate&quot;))
updatedReservation.put(&quot;totalRentAfterDiscount&quot;,vars.get(&quot;rate&quot;))
updatedReservation.put(&quot;totalPenalties&quot;,0)
updatedReservation.put(&quot;totalTaxes&quot;,vars.get(&quot;totalTaxes&quot;))
updatedReservation.put(&quot;totalRentTaxes&quot;,vars.get(&quot;totalTaxes&quot;))
updatedReservation.put(&quot;totalRestDiscount&quot;,0)
updatedReservation.put(&quot;totalInclusiveTaxes&quot;,vars.get(&quot;inclusiveTaxes&quot;))
updatedReservation.put(&quot;totalRestDiscount&quot;,0)
updatedReservation.put(&quot;totalRentDiscount&quot;,0)
updatedReservation.put(&quot;totalRentDiscountPercent&quot;,0)
updatedReservation.put(&quot;totalAdjustment&quot;,0)


def changedReservation =new groovy.json.JsonBuilder(updatedReservation).toPrettyString()
//log.info(changedReservation)
vars.put(&quot;changedReservation&quot;,changedReservation)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="assert no errors" enabled="true">
                <stringProp name="JSON_PATH">$.errors</stringProp>
                <stringProp name="EXPECTED_VALUE">[]</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Setting/Country/getActiveLiteCountries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/Country/getActiveLiteCountries</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/LookUps/ReservationStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/LookUps/ReservationStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Setting/ControlPanel/ReservationSourcesCustomizationsController/GetLiteByCompany" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5082</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/ControlPanel/ReservationSourcesCustomizationsController/GetLiteByCompany</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/Get/{created Reservation}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/Get/${Created_Reservation}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def reservation = new groovy.json.JsonBuilder(json.data).toPrettyString()

vars.put(&quot;reservation&quot;,reservation)
log.info(vars.get(&quot;reservation&quot;))

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="check out reservation with receipts" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/Get/{created Reservation}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/Get/${Created_Reservation}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnits ,units [setter]" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def reservation = new groovy.json.JsonBuilder(json.data).toPrettyString()


// set reservation body
vars.put(&quot;reservation&quot;,reservation)
//log.info(vars.get(&quot;reservation&quot;))

// set reservation units to be by number
json.data.reservationUnits.each{unit-&gt;
unit.put(&quot;isByUnitType&quot;,false)}
def reservationUnits =new groovy.json.JsonBuilder(json.data.reservationUnits).toPrettyString()
vars.put(&apos;reservationUnits&apos;,reservationUnits)


json.data.reservationUnits.each{unit -&gt; 
	unit.remove(&quot;canBeMerged&quot;)
	unit.remove(&quot;reservationId&quot;)
	unit.remove(&quot;floorId&quot;)
	unit.remove(&quot;floorName&quot;)
	unit.remove(&quot;fromDate&quot;)
	unit.remove(&quot;toDate&quot;)
	unit.remove(&quot;mergedUnitReservationUnitId&quot;)
	unit.remove(&quot;doorLockCardsKeysCount&quot;)
	unit.remove(&quot;mergedUnitId&quot;)
	unit.remove(&quot;mergedUnitNumber&quot;)
	unit.remove(&quot;unavailable&quot;)
	unit.remove(&quot;changedUnitNumber&quot;)
	unit.remove(&quot;changedUnitTypeName&quot;)
	unit.remove(&quot;action&quot;)
	unit.remove(&quot;allowChangeUnit&quot;)
	unit.remove(&quot;changeUnitReason&quot;)
	unit.remove(&quot;isLockMapped&quot;)
	unit.remove(&quot;requireReload&quot;)
	
}
def units =new groovy.json.JsonBuilder(json.data.reservationUnits).toPrettyString()
//log.info(units)
vars.put(&quot;units&quot;,units)
vars.put(&quot;units&quot;,units)

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/rate-calculator/get-reservation-units-rates" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;fromDate&quot;: ${From_Date},&#xd;
	&quot;toDate&quot;: ${To_Date},&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;reservationRentalTypeId&quot;: 1,&#xd;
	&quot;reservationCalenderTypeId&quot;: 1,&#xd;
	&quot;reservationStatusId&quot;: 2,&#xd;
	&quot;selectedRateMethodId&quot;: 2,&#xd;
	&quot;selectedRateMethodChanged&quot;: false,&#xd;
	&quot;units&quot;: ${units},&#xd;
	&quot;rateCalculatorRequestCounter&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/financial/rate-calculator/get-reservation-units-rates</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
              <stringProp name="TestPlan.comments">consumes units Variable</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="SelectedProperty" elementType="Header">
                    <stringProp name="Header.name">SelectedProperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="ClientId" elementType="Header">
                    <stringProp name="Header.name">ClientId</stringProp>
                    <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="reservationUnitsRates , rate" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())

json.data.each{unit -&gt;
unit.put(&quot;isCalculatedAtFrontEnd&quot;,false)
unit.put(&quot;rateCalculatorRequestCounter&quot;,1)
unit.rates.each{rate -&gt;
rate.put(&quot;nights&quot;,1)
rate.put(&quot;isLastRate&quot;,true)
}
unit.put(&quot;checkOutDate&quot;,null)
}

def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
//log.info(newJson)
vars.put(&apos;reservationUnitsRates&apos;, newJson)
// the rate field in rreservation creation
def json1 = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalRate = 0.0
json1.data.each{unit -&gt;
Double unitRate = unit.rates[0].rate
totalRate =unitRate+totalRate
}
log.info(&quot;the total rate is :&quot;,totalRate)
vars.put(&quot;rate&quot;,totalRate.toString())
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/financial/tax-calculator/get-reservation-taxes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;startDate&quot;:${From_Date},&#xd;
	&quot;endDate&quot;: ${To_Date},&#xd;
	&quot;datesChanged&quot;: false,&#xd;
	&quot;reservationId&quot;:${Created_Reservation},&#xd;
	&quot;reload&quot;: false,&#xd;
	&quot;propertyId&quot;: ${Property_ID}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/financial/tax-calculator/get-reservation-taxes</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="SelectedProperty" elementType="Header">
                    <stringProp name="Header.name">SelectedProperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="ClientId" elementType="Header">
                    <stringProp name="Header.name">ClientId</stringProp>
                    <stringProp name="Header.value">84fb02ec-f5a8-8bf0-7520-2da5de3904be</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="reservationTaxes" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">reservationTaxes</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="totalTaxes, reservationTaxes" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
Double totalTaxes = 0.0
Double rate =Double.parseDouble(vars.get(&quot;rate&quot;))
boolean inclusive = false
Double	rent =0.0
Double inclusiveTaxes=0.0
if(json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}){
		rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/((0.15*0.025)+1+0.15+0.025))
}else if (json.data.any{tax-&gt;(!tax.isActive&amp;&amp;tax.appliedForName==&quot;Lodging Fees(Fee)&quot;&amp;&amp;tax.taxAppliedForSource==1)}&amp;&amp;json.data.any{tax-&gt;(tax.isActive&amp;&amp;tax.taxName==&quot;Lodging Fees&quot;)}){
rent = (Double.parseDouble(vars.get(&quot;rate&quot;))/(1+0.15+0.025))
}
json.data.each{tax -&gt; 
Double gotTaxes =tax.totalAmount
//method Id --&gt; amount= 2 or percentage = 1
if(tax.isActive){
	//Rent Taxes
if(tax.appliedForName==&quot;Rent&quot;||(tax.appliedForName==&quot;Lodging Fees(Fee)&quot; &amp;&amp; tax.taxAppliedForSource==1)){
	if(tax.methodId==1){
		if(tax.inclusive==false){
				if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					i++
					tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01*0.025))				
				}else if (tax.appliedForName==&quot;Rent&quot;){
				tax.put(&quot;totalAmount&quot;,Double.parseDouble(vars.get(&quot;rate&quot;))*(tax.amount*0.01))				
				}
		

		}else if(tax.inclusive){
			
					if(tax.appliedForName==&quot;Lodging Fees(Fee)&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01*0.025))
					}else if(tax.appliedForName==&quot;Rent&quot;){
					tax.put(&quot;totalAmount&quot;,(rent)*(tax.amount*0.01))
							
					}
			}
	}else{tax.put(&quot;totalAmount&quot;,tax.amount)}
	
	gotTaxes = tax.totalAmount
	//log.info( &quot;tax is&quot;,gotTaxes.toString())
	totalTaxes =gotTaxes+ totalTaxes
	if(tax.inclusive==false){
	rate += gotTaxes	
	}else{inclusiveTaxes = totalTaxes}
	
}
}
}
//log.info(&quot;total taxes is&quot;,totalTaxes.toString())
vars.put(&quot;totalTaxes&quot;,totalTaxes.toString())
vars.put(&quot;inclusiveTaxes&quot;,inclusiveTaxes.toString())
vars.put(&quot;net&quot;,rate.toString())
def newJson = new groovy.json.JsonBuilder(json.data).toPrettyString()
log.info(newJson)
vars.put(&quot;reservationTaxes&quot;,newJson)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Reservation/create-receipt-voucher" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;propertyId&quot;: ${Property_ID},&#xd;
	&quot;typeId&quot;: 1,// 1- Receipt Voucher&#xd;
	&quot;amount&quot;: ${net},&#xd;
	&quot;currencyId&quot;: 1476,&#xd;
	&quot;paymentMethodId&quot;: 1,&#xd;
	&quot;paymentMethodName&quot;: &quot;Cash&quot;,&#xd;
	&quot;bankName&quot;: null,&#xd;
	&quot;chequeNumber&quot;: null,&#xd;
	&quot;depositorName&quot;: null,&#xd;
	&quot;transactionNumber&quot;: null,&#xd;
	&quot;bankId&quot;: null,&#xd;
	&quot;reservationId&quot;: ${Created_Reservation},&#xd;
	&quot;purposeAr&quot;: &quot;قيمة الإيجار للوحدات: 12&quot;,&#xd;
	&quot;purposeEn&quot;: &quot;Rent fees for units:&quot;,&#xd;
	&quot;defaultCurrencyId&quot;: 1476,&#xd;
	&quot;exchangeRate&quot;: 1,&#xd;
	&quot;issueDateTime&quot;: &quot;${__time(yyyy-MM-dd hh:mm)}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/create-receipt-voucher</stringProp>
              <stringProp name="HTTPSampler.method">post</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Selectedproperty</stringProp>
                    <stringProp name="Header.value">${Property_ID}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="assert no errors" enabled="true">
                <stringProp name="JSON_PATH">$.errors</stringProp>
                <stringProp name="EXPECTED_VALUE">[]</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Reservation/check-out-wizard" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${changedReservation}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/check-out-wizard</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="changedReservation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def updatedReservation = new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservation&quot;))

double balance = -1* Double.parseDouble(vars.get(&quot;net&quot;))
/// Action  9  -&gt; chckout (edit)
updatedReservation.put(&quot;action&quot;,9)
updatedReservation.put(&quot;reservationUnits&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationUnits&quot;)))
updatedReservation.put(&quot;reservationUnitsRates&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationUnitsRates&quot;)))
updatedReservation.put(&quot;reservationTaxes&quot;,new groovy.json.JsonSlurper().parseText(vars.get(&quot;reservationTaxes&quot;)))
updatedReservation.put(&quot;unitsTotalInsurance&quot;,0)
updatedReservation.put(&quot;totalReceived&quot;,0)
updatedReservation.put(&quot;totalRefund&quot;,0)
updatedReservation.put(&quot;totalInsuranceReceived&quot;,0)
updatedReservation.put(&quot;totalInsuranceRefund&quot;,0)
updatedReservation.put(&quot;totalDraft&quot;,0)
updatedReservation.put(&quot;balance&quot;,balance)
updatedReservation.put(&quot;totalExtras&quot;,0)
updatedReservation.put(&quot;totalNet&quot;,vars.get(&quot;net&quot;))
updatedReservation.put(&quot;totalRentBeforeDiscount&quot;,vars.get(&quot;rate&quot;))
updatedReservation.put(&quot;totalRentAfterDiscount&quot;,vars.get(&quot;rate&quot;))
updatedReservation.put(&quot;totalPenalties&quot;,0)
updatedReservation.put(&quot;totalTaxes&quot;,vars.get(&quot;totalTaxes&quot;))
updatedReservation.put(&quot;totalRentTaxes&quot;,vars.get(&quot;totalTaxes&quot;))
updatedReservation.put(&quot;totalRestDiscount&quot;,0)
updatedReservation.put(&quot;totalInclusiveTaxes&quot;,vars.get(&quot;inclusiveTaxes&quot;))
updatedReservation.put(&quot;totalRestDiscount&quot;,0)
updatedReservation.put(&quot;totalRentDiscount&quot;,0)
updatedReservation.put(&quot;totalRentDiscountPercent&quot;,0)
updatedReservation.put(&quot;totalAdjustment&quot;,0)


def changedReservation =new groovy.json.JsonBuilder(updatedReservation).toPrettyString()
//log.info(changedReservation)
vars.put(&quot;changedReservation&quot;,changedReservation)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Setting/Country/getActiveLiteCountries" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/Country/getActiveLiteCountries</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/LookUps/ReservationStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/LookUps/ReservationStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/Setting/ControlPanel/ReservationSourcesCustomizationsController/GetLiteByCompany" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5082</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Setting/ControlPanel/ReservationSourcesCustomizationsController/GetLiteByCompany</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/Reservation/Get/{created Reservation}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
              <stringProp name="HTTPSampler.path">api/Reservation/Get/${Created_Reservation}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData())
def reservation = new groovy.json.JsonBuilder(json.data).toPrettyString()

vars.put(&quot;reservation&quot;,reservation)
log.info(vars.get(&quot;reservation&quot;))

</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Users\Mostafa Hamed\Desktop\no invoice.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
